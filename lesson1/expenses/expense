#! /usr/bin/env ruby
require "pg"
require "pry"
require "io/console"

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: "expenses")
    setup_schema
  end

  def setup_schema
    result = @connection.exec <<~SQL
    SELECT COUNT(*)
    FROM information_schema.tables
    WHERE table_schema = 'public' AND table_name = 'expenses';
    SQL
  
    if result[0]["count"] == "0"
      @connection.exec <<~SQL
        CREATE TABLE expenses(
          id serial PRIMARY KEY,
          amount numeric(6, 2) NOT NULL,
          memo text NOT NULL,
          created_on date NOT NULL
        );
      
        ALTER TABLE expenses ADD CHECK(amount BETWEEN 0.01 AND 9999.99);
      SQL
    end
  end

  def parse_row(row) 
    id = row["id"]
    date = row["created_on"]
    amount = row["amount"]
    description = row["memo"]

    [id, date, amount, description]
  end

  def display_row(row)
    id, date, amount, description = parse_row(row)

    "#{id.center(1)} | #{date.center(10)} | #{amount.rjust(12)} | #{description}"
  end

  def display_total(total)    
    puts "#{"Total".ljust(16)} #{total.to_s.rjust(12)}"
  end

  def display_results(result)
    result.each { |row| puts display_row(row) }
  end

  def list_amount_total(result)
    total = 0
    max_row_size = 0

    result.each do |row|
      rw = display_row(row)
      max_row_size = rw.size + 8 if rw.size > max_row_size 
     
      total += row["amount"].to_f
    end

    puts "-" * max_row_size
    display_total(total.round(2))
  end

  def list_expenses
    result = @connection.exec "SELECT * FROM expenses ORDER BY created_on;"
    expenses = result.each.size

    if expenses == 0
      puts "There are no expenses."
    else
      puts "There are #{expenses} expenses."
      display_results(result)
      list_amount_total(result)
    end
  end

  def add_expense(argv)
    abort "You must provide an amount and memo." unless argv.size == 3
    amount, memo = argv[1], argv[2]
  
    @connection.exec_params("INSERT INTO expenses(amount, memo, created_on)
           VALUES ($1, $2, now())", [amount, memo])
  end

  def search(argv)
    abort "Must supply search term " if argv.size < 2
    term = argv[1]

    result = @connection.exec_params("SELECT * FROM expenses WHERE memo ILIKE $1::text; ", ["%#{term}%"])
    
    expenses = result.each.size
    if expenses == 0
      puts "There are no expenses."
    else
      puts "There are #{expenses} expenses."
      display_results(result)
      list_amount_total(result)
    end
  end

  def delete(argv)
    abort "Must supply row number for deletion" if argv.size < 2
    row = argv[1]
    
    result = @connection.exec_params("SELECT * FROM expenses
      WHERE id = $1", [row]) 
    
    if result.ntuples == 0
      puts "There is no expense with the id '#{row}'." 
    else
      @connection.exec_params("DELETE FROM expenses
        WHERE id = $1", [row]) 

      puts "The following expense has been deleted:"
      display_results(result)
    end
  end

  def clear
    puts "This will remove all expenses. Are you sure? (y/n)"
    input = $stdin.getch

    if input == 'y'
      @connection.exec("DELETE FROM expenses;")
      puts "All expenses have been deleted."
    elsif input == 'n'
      abort
    else
      puts "Please enter valid inputs: 'y' or 'n'"
    end
  end
end

class CLI
  def initialize
    @expenses = ExpenseData.new
  end

  def run(argv)
    case argv[0]
    when 'list'   then @expenses.list_expenses
    when 'search' then @expenses.search(argv)
    when 'delete' then @expenses.delete(argv)
    when 'add'    then @expenses.add_expense(argv)
    when 'clear'  then @expenses.clear
    else
      help_content
    end
  end

  def help_content
    puts <<~MSG
    add AMOUNT MEMO [DATE] - record a new expense
    clear - delete all expenses
    list - list all expenses
    delete NUMBER - remove expense with id NUMBER
    search QUERY - list expenses with a matching memo field
    MSG
  end
end

CLI.new.run(ARGV)
